import { readFile, writeFile } from 'node:fs/promises';

const filesToCompare = {
	file1: './files/quitar_de_este.csv',
	file2: './files/todo_lo_que_este_en_este.csv',
};

const routeToNewFile = './files/diff.csv';

const runScript = async () => {
	const separador = '\t';
	const [file1Readed, file2Readed] = await Promise.all([
		readFile(filesToCompare.file1, { encoding: 'utf8' }),
		readFile(filesToCompare.file2, { encoding: 'utf8' }),
	]);
	const file1Lines = file1Readed
		.replaceAll('\r', '')
		.split('\n')
		.filter((linea) => linea !== '');
	const file2Lines = file2Readed
		.replaceAll('\r', '')
		.split('\n')
		.filter((linea) => linea !== '');
	// Get the header of the files
	const header = file1Lines[0].split(separador);
	const objFiles: Record<string, { value: string; counter: number }> = {};
	const diffLines: Record<string, string> = {};
	const completeDiffLines: Record<string, object> = {};
	for (let file of [file1Lines, file2Lines]) {
		for (let line of file) {
			const arrayLine = line.split(separador);
			const objLine: Record<string, string> = {};
			for (let i = 0; i < arrayLine.length; i++) {
				objLine[header[i]] = arrayLine[i];
			}
			const id = objLine['id'];
			// if the id is not present or is the header, continue
			if (!id || id === 'id') continue;
			if (id === '4141') console.log({ objLine });
			// Custom conditionals to filter the lines
			if (objLine['razon_social'] === 'CONTADO') continue;
			// if(!uniqueCifs.includes(objLine['cif'])) continue
			// const kindIdentifier = checkisCifOrNif(objLine['cif']);
			// if (objLine['razon_social'].toUpperCase().includes('FERGA')) {
			// 	console.log({
			// 		// kindIdentifier,
			// 		isValidCif: isValidCif(objLine['cif']),
			// 	});
			// 	console.log({ objLine });
			// }
			// if (kindIdentifier === 'none') continue;
			// else if (kindIdentifier === 'cif' && !isValidCif(objLine['cif']))
			// 	continue;
			// else if (kindIdentifier === 'nif' && !isValidNif(objLine['cif']))
			// 	continue;
			// if (!isValidCif(objLine['cif'])) continue;

			// add or remove the line from the object
			const element = objFiles[id];
			if (element) {
				delete diffLines[id];
				delete completeDiffLines[id];
				element.counter++;
			} else {
				objFiles[id] = { value: line, counter: 1 };
				diffLines[id] = line;
				completeDiffLines[id] = objLine;
			}
		}
	}
	const diffArray: string[] = Object.values(diffLines);
	console.log({
		diffLines,
		diffArray,
		lenght: Object.keys(diffLines).length,
	});
	// console.log({ completeDiffLines });

	const result = [header.join(separador), ...diffArray].join('\r\n');
	await writeFile(routeToNewFile, result);
};

const checkisCifOrNif = (chain: string): 'cif' | 'nif' | 'none' => {
	if (chain.length !== 9) return 'none';
	const firstChar = chain[0];
	const lastChar = chain[chain.length - 1];
	if (firstChar === 'X' || firstChar === 'Y' || firstChar === 'Z')
		return 'nif';
	else if (isNaN(Number(lastChar))) return 'nif';
	else if (isNaN(Number(firstChar))) return 'cif';
	else return 'none';
};

const isValidCif = (cif: string) => {
	if (!cif || cif.length !== 9) {
		return false;
	}

	const letters = ['J', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I'];
	let digits = cif.slice(1, -1);
	const letter = cif.slice(0, 1);
	const control = cif.slice(-1);
	let sum = 0;
	let i;
	let digit;

	if (!letter.match(/[A-Z]/)) {
		return false;
	}

	for (i = 0; i < digits.length; ++i) {
		digit = parseInt(digits[i]);

		if (isNaN(digit)) {
			return false;
		}

		if (i % 2 === 0) {
			digit *= 2;
			if (digit > 9) {
				digit = parseInt((digit / 10).toString()) + (digit % 10);
			}

			sum += digit;
		} else {
			sum += digit;
		}
	}

	sum %= 10;
	if (sum !== 0) {
		digit = 10 - sum;
	} else {
		digit = sum;
	}

	if (letter.match(/[ABEH]/)) {
		return String(digit) === control;
	}
	if (letter.match(/[NPQRSW]/)) {
		return letters[digit] === control;
	}

	return String(digit) === control || letters[digit] === control;
};

const isValidNif = (nif: string): boolean => {
	const letter = 'TRWAGMYFPDXBNJZSQVHLCKE';
	const nifSanitized = nif.toUpperCase().replace(/[^A-Z0-9]/g, '');

	if (nifSanitized.length === 9 && !isNaN(Number(nifSanitized.slice(0, 8)))) {
		let indice = parseInt(nifSanitized.slice(0, 8), 10) % 23;
		return nifSanitized.charAt(8) === letter.charAt(indice);
	} else if (nifSanitized.startsWith('X')) {
		const numerosExtranjero = nifSanitized.slice(1, 8);
		if (!isNaN(Number(numerosExtranjero))) {
			let indice = parseInt(numerosExtranjero, 10) % 23;
			return nifSanitized.charAt(8) === letter.charAt(indice);
		}
	}

	return false;
};

runScript();

const validCifs = [
	`F90141466`,
	`B91305391`,
	`F91272906`,
	`F91272906`,
	`F91272906`,
	`B90450180`,
	`B41537036`,
	`75417927F`,
	`B91908962`,
	`20063369D`,
	`20063369D`,
	`B90292590`,
	`B90292590`,
	`B90292590`,
	`B90379462`,
	`B90379462`,
	`B90379462`,
	`B91088310`,
	`28841442V`,
	`28841442V`,
	`J91848432`,
	`J91848432`,
	`14638726P`,
	`14638726P`,
	`14638726P`,
	`B90369802`,
	`B90369802`,
	`B90369802`,
	`B90369802`,
	`B90369802`,
	`B90369802`,
	`B90369802`,
	`B90369802`,
	`B90369802`,
	`B90369802`,
	`B90369802`,
	`B90369802`,
	`B90369802`,
	`B90369802`,
	`B90369802`,
	`B90369802`,
	`B90369802`,
	`B90369802`,
	`B90369802`,
	`B90369802`,
	`B90369802`,
	`B90369802`,
	`B90369802`,
	`B90369802`,
	`B90369802`,
	`B90369802`,
	`B90369802`,
	`B90369802`,
	`B90369802`,
	`B90369802`,
	`B90369802`,
	`B90369802`,
	`B90369802`,
	`B90369802`,
	`B90369802`,
	`B90369802`,
	`44958782S`,
	`28430761R`,
	`28430761R`,
	`14638432J`,
	`14638432J`,
	`34037637Y`,
	`34037637Y`,
	`34037637Y`,
	`14324213C`,
	`14324213C`,
	`14324213C`,
	`34076986W`,
	`34076986W`,
	`44951869W`,
	`44951869W`,
	`44951869W`,
	`34038172N`,
	`34038172N`,
	`B88388277`,
	`B88388277`,
	`B41495615`,
	`B91281501`,
	`B91281501`,
	`B91281501`,
	`B67782847`,
	`B67782847`,
	`B67782847`,
	`B67782847`,
	`B67782847`,
	`B67782847`,
	`B41580424`,
	`B41580424`,
	`B41580424`,
	`J91728683`,
	`J91728683`,
	`J91728683`,
	`J91728683`,
	`B91978437`,
	`B90461054`,
	`B41652918`,
	`B41652918`,
	`B42713370`,
	`B42713370`,
	`B42713370`,
	`B42713370`,
	`B91794164`,
	`B91794164`,
	`B91794164`,
	`B41580259`,
	`B41580259`,
	`B41580259`,
	`B41580259`,
	`B41580259`,
	`B41580259`,
	`B41580259`,
	`B41580259`,
	`B41580259`,
	`B41580259`,
	`B41580259`,
	`B41580259`,
	`B41580259`,
	`B09962937`,
	`B09962937`,
	`B09962937`,
	`B90043522`,
	`B90043522`,
	`B90043522`,
	`B90043522`,
	`33965647Y`,
	`33965647Y`,
	`34030273W`,
	`B90225483`,
	`B90225483`,
	`B90225483`,
	`27897791X`,
	`27897791X`,
	`27897791X`,
	`27897791X`,
	`27897791X`,
	`27897791X`,
	`27897791X`,
	`B91461822`,
	`B90087560`,
	`B90087560`,
	`B90087560`,
	`B90090622`,
	`B72729577`,
	`B72729577`,
	`B72729577`,
	`B72729577`,
	`B91075754`,
	`B91075754`,
	`B91149542`,
	`B41259441`,
	`B91232322`,
	`B91232322`,
	`B91232322`,
	`B91232322`,
	`B91232322`,
	`B90212200`,
	`B90212200`,
	`B16885543`,
	`B90423013`,
	`B41539909`,
	`B41539909`,
	`B41539909`,
	`F41632076`,
	`F41632076`,
	`B70504196`,
	`B70504196`,
	`B70504196`,
	`B70504196`,
	`B70504196`,
	`B70504196`,
	`B70504196`,
	`44954043Z`,
	`44954043Z`,
	`44954043Z`,
	`44954043Z`,
	`44954043Z`,
	`44954043Z`,
	`B90393109`,
	`B090872466`,
	`B09872466`,
	`44954869N`,
	`44954869N`,
	`44954869N`,
	`77537387V`,
	`14317298M`,
	`44952287Y`,
	`B41233552`,
	`B41233552`,
	`F90417494`,
	`F90417494`,
	`B02827582`,
	`B02827582`,
	`B02827582`,
	`B02827582`,
	`B02827582`,
	`34023670T`,
	`34023670T`,
	`34023670T`,
	`34023670T`,
	`34023670T`,
	`34023670T`,
	`34023670T`,
	`34023670T`,
	`34023670T`,
	`34023670T`,
	`34023670T`,
	`34023670T`,
	`15406109L`,
	`14319857B`,
	`73920871K`,
	`B90344540`,
	`A41283920`,
	`A41283920`,
	`A41283920`,
	`53272583Y`,
	`53272583Y`,
	`53272583Y`,
	`B90294257`,
	`B90294257`,
	`B90294257`,
	`B90294257`,
	`B90294257`,
	`75920092J`,
	`75920092J`,
	`75920092J`,
	`75920092J`,
	`75920092J`,
	`14328229B`,
	`14328229B`,
	`14328229B`,
	`B90158551`,
	`15407336G`,
	`15407336G`,
	`28634241T`,
	`28697378W`,
	`28697378W`,
	`28697378W`,
	`28697378W`,
	`34074593R`,
	`28807938R`,
	`14316243P`,
	`14316243P`,
	`14316243P`,
	`14316243P`,
	`15406214D`,
	`15406214D`,
	`14327886J`,
	`47391126V`,
	`47206508C`,
	`47206508C`,
	`44953582J`,
	`34073407B`,
	`B91095166`,
	`B91095166`,
	`B91095166`,
	`30221526D`,
	`B91760660`,
	`B90104605`,
	`B90104605`,
	`B05373964`,
	`B05373964`,
	`B05373964`,
	`B05373964`,
	`B41495896`,
	`B41495896`,
	`F91320747`,
	`F91320747`,
	`F91320747`,
	`F91320747`,
	`F91320747`,
	`F91320747`,
	`F91320747`,
	`F91320747`,
	`F91320747`,
	`F91320747`,
	`F91320747`,
	`F91320747`,
	`F91320747`,
	`F91320747`,
	`F91320747`,
	`F91320747`,
	`F91320747`,
	`F91320747`,
	`F91320747`,
	`F91320747`,
	`F91320747`,
	`F91320747`,
	`F91320747`,
	`F91320747`,
	`F91320747`,
	`F91320747`,
	`F91320747`,
	`F91320747`,
	`F91320747`,
	`F91320747`,
	`F91320747`,
	`F91320747`,
	`F91320747`,
	`F91320747`,
	`F91320747`,
	`F91320747`,
	`F91320747`,
	`F91320747`,
	`F91320747`,
	`30286650C`,
	`30286650C`,
	`B41555772`,
	`B41555772`,
	`B41555772`,
	`B41555772`,
	`B41555772`,
	`B41555772`,
	`B41555772`,
	`B41555772`,
	`B41555772`,
	`B41555772`,
	`B41555772`,
	`B41555772`,
	`B41555772`,
	`B41555772`,
	`B41555772`,
	`B41555772`,
	`B41555772`,
	`B41555772`,
	`B41555772`,
	`B41555772`,
	`B41555772`,
	`B41555772`,
	`B41555772`,
	`B41555772`,
	`B41555772`,
	`B41555772`,
	`B91608323`,
	`B91608323`,
	`B41729153`,
	`J91372839`,
	`J91372839`,
	`B90332453`,
	`B90332453`,
	`B90332453`,
	`B90332453`,
	`B90332453`,
	`B90332453`,
	`B90332453`,
	`B90332453`,
	`B90332453`,
	`B91203901`,
	`B91203901`,
	`B91203901`,
	`B41172545`,
	`B41172545`,
	`77532206B`,
	`B05488739`,
	`B05488739`,
	`B91280784`,
	`B91280784`,
	`B91280784`,
	`B91280784`,
	`B91280784`,
	`B91280784`,
	`B91280784`,
	`B91280784`,
	`B91280784`,
	`B91280784`,
	`B91280784`,
	`B91280784`,
	`B91280784`,
	`B91280784`,
	`B91280784`,
	`B91280784`,
	`B91280784`,
	`B91280784`,
	`B91280784`,
	`B91280784`,
	`B91280784`,
	`B91280784`,
	`B90129974`,
	`B72551112`,
	`B90415704`,
	`45998578G`,
	`45998578G`,
	`B90208372`,
	`34073176X`,
	`34073176X`,
	`34073176X`,
	`34073176X`,
	`B90422015`,
	`B90422015`,
	`B90331125`,
	`47394415V`,
	`47394415V`,
	`47394415V`,
	`B90413220`,
	`14320411J`,
	`14320411J`,
	`14320411J`,
	`14320411J`,
	`14320411J`,
	`34078416Y`,
	`28791607T`,
	`B90353269`,
	`B91277517`,
	`34043996V`,
	`34043996V`,
	`34043996V`,
	`34043996V`,
	`34043996V`,
	`32929307Z`,
	`32929307Z`,
	`75397879S`,
	`15414815P`,
	`15414815P`,
	`15414815P`,
	`34073490W`,
	`75428824w`,
	`75428824w`,
	`75428824w`,
	`75428824w`,
	`75428824w`,
	`28694320A`,
	`28694320A`,
	`28694320A`,
	`14322624H`,
	`14322624H`,
	`47011279S`,
	`47011279S`,
	`47011279S`,
	`47011279S`,
	`47011279S`,
	`47011279S`,
	`47011279S`,
	`B91707448`,
	`30227116X`,
	`30227116X`,
	`30227116X`,
	`30227116X`,
	`28693564Y`,
	`15406696P`,
	`15406696P`,
	`15406696P`,
	`28741201X`,
	`28741201X`,
	`28741201X`,
	`34038129S`,
	`34038129S`,
	`34038129S`,
	`34038129S`,
	`34038129S`,
	`34038129S`,
	`34038129S`,
	`34038129S`,
	`34038129S`,
	`34038129S`,
	`34038129S`,
	`34038129S`,
	`34038129S`,
	`34038129S`,
	`34038129S`,
	`34038129S`,
	`34038129S`,
	`34038129S`,
	`34038129S`,
	`34038129S`,
	`34038129S`,
	`34038129S`,
	`34038129S`,
	`34038129S`,
	`34038129S`,
	`34038129S`,
	`34038129S`,
	`34038129S`,
	`34038129S`,
	`34038129S`,
	`34038129S`,
	`34038129S`,
	`34038129S`,
	`34038129S`,
	`34038129S`,
	`34038129S`,
	`34038129S`,
	`34038129S`,
	`34038129S`,
	`34038129S`,
	`34038129S`,
	`34038129S`,
	`34038129S`,
	`34038129S`,
	`44954392H`,
	`44954392H`,
	`44954392H`,
	`77535239P`,
	`77535239P`,
	`77535239P`,
	`44240187D`,
	`44240187D`,
	`34040667T`,
	`47338693R`,
	`34036897W`,
	`34036897W`,
	`28595369K`,
	`14316393C`,
	`14316393C`,
	`14316393C`,
	`28519666B`,
	`28519666B`,
	`B90361379`,
	`49093189B`,
	`20503149Y`,
	`28576345H`,
	`15409174W`,
	`44954493G`,
	`44954493G`,
	`44954493G`,
	`20061375Q`,
	`75365011Z`,
	`15406107V`,
	`15406107V`,
	`15406107V`,
	`28576654M`,
	`44951501W`,
	`44951501W`,
	`44951501W`,
	`15405352K`,
	`14321215N`,
	`14321215N`,
	`14321215N`,
	`44953844E`,
	`44953844E`,
	`44953844E`,
	`28687419W`,
	`B90401613`,
	`B90401613`,
	`B90401613`,
	`B90401613`,
	`B90431016`,
	`B90431016`,
	`B90329152`,
	`44958405Y`,
	`B91319475`,
	`77583341V`,
	`77583341V`,
	`14327648M`,
	`14327648M`,
	`28421115S`,
	`28421115S`,
	`28542448T`,
	`15414511A`,
	`15414511A`,
	`15414511A`,
	`15414511A`,
	`15414511A`,
	`15414511A`,
	`15406294C`,
	`28576076W`,
	`34044254E`,
	`34044254E`,
	`34044254E`,
	`34044254E`,
	`34044254E`,
	`34044254E`,
	`28581984E`,
	`28581984E`,
	`34041989B`,
	`52223069M`,
	`52223069M`,
	`52223069M`,
	`52223069M`,
	`52223069M`,
	`52223069M`,
	`52223069M`,
	`52223069M`,
	`52223069M`,
	`52223069M`,
	`52223069M`,
	`52223069M`,
	`52223069M`,
	`52223069M`,
	`52223069M`,
	`52223069M`,
	`52223069M`,
	`24523260Q`,
	`24523260Q`,
	`24523260Q`,
	`28758213W`,
	`28758213W`,
	`28758213W`,
	`28758213W`,
	`A41273343`,
	`44956079A`,
	`44956079A`,
	`44956079A`,
	`44956079A`,
	`75410326L`,
	`75410326L`,
	`14324817A`,
	`34356543V`,
	`B91197897`,
	`B02952182`,
	`B90317652`,
	`B90317652`,
	`B90317652`,
	`B90317652`,
	`B90317652`,
	`B90317652`,
	`B90317652`,
	`B90317652`,
	`B90317652`,
	`B90317652`,
	`B90317652`,
	`B41585209`,
	`B85977676`,
	`B85977676`,
	`B85977676`,
	`B91952598`,
	`20062689L`,
	`B09996430`,
	`B41791963`,
	`B90188590`,
	`B90188590`,
	`B41550559`,
	`B41550559`,
	`B41550559`,
	`B41550559`,
	`77532047J`,
	`47004218S`,
	`47004218S`,
	`47004218S`,
	`47004218S`,
	`14326878V`,
	`14326878V`,
	`14326878V`,
	`14326878V`,
	`14326878V`,
	`14326878V`,
	`28914110M`,
	`29531733D`,
	`14328837K`,
	`14328837K`,
	`14328837K`,
	`B41155338`,
	`B41155338`,
	`B41578204`,
	`B41578204`,
	`B41578204`,
	`B90016015`,
	`B90016015`,
	`B90306507`,
	`B90306507`,
	`B90306507`,
	`B41989138`,
	`B41989138`,
	`B41989138`,
	`B91379545`,
	`B91379545`,
	`B91379545`,
	`B90472226`,
	`B90472226`,
	`49136990C`,
	`B90449760`,
	`B67889295`,
	`B67889295`,
	`B41869397`,
	`B82109703`,
	`B41481326`,
	`B41481326`,
	`B41481326`,
	`14315789Z`,
	`14315789Z`,
	`B90114711`,
	`B90114711`,
	`B90114711`,
	`B90114711`,
	`B02726495`,
	`B02726495`,
	`B41591454`,
	`B41591454`,
	`B41617762`,
	`B41617762`,
	`B41617762`,
	`B41617762`,
	`B41617762`,
	`B41887308`,
	`B41031659`,
	`B41031659`,
	`B90404435`,
	`B90404435`,
	`B90404435`,
	`B90404435`,
	`B90404435`,
	`28663496E`,
	`28663496E`,
	`B91361444`,
	`B91361444`,
	`B91361444`,
	`B91612465`,
	`B90308289`,
	`B90308289`,
	`B90308289`,
	`B90243304`,
	`14329000T`,
	`14329000T`,
	`B41554148`,
	`B41554148`,
	`B41554148`,
	`28602928J`,
	`28602928J`,
	`14323623M`,
	`14323623M`,
	`14323623M`,
	`B91219212`,
	`B01670082`,
	`B01670082`,
	`B01670082`,
	`B90400144`,
	`B90400144`,
	`B90400144`,
];

console.log('cifs validos',validCifs.length)
const uniqueCifs = Array.from(new Set(validCifs));
console.log('cifs unicos',uniqueCifs.length)
